PS D:\first-TMS-repo\Terraform\HW_Lesson_42_Terr_3> terraform apply
data.aws_subnet.default_subnet_3: Reading...
data.aws_vpc.def_vpc: Reading...
data.aws_subnet.default_subnet_2: Reading...    
data.aws_subnet.default_subnet_1: Reading...    
data.aws_ami.amazon_linux_ami_latest: Reading...
data.aws_subnet.default_subnet_3: Read complete after 1s [id=subnet-0d1454afe4297ec32]
data.aws_subnet.default_subnet_2: Read complete after 1s [id=subnet-0affb800232bb18ca]
data.aws_subnet.default_subnet_1: Read complete after 1s [id=subnet-093b539ea9689e8c0]
data.aws_ami.amazon_linux_ami_latest: Read complete after 1s [id=ami-0fe0b2cf0e1f25c8a]
data.aws_vpc.def_vpc: Read complete after 2s [id=vpc-00486a97605434fcc]
data.aws_subnets.default_subnets: Reading...
data.aws_subnets.default_subnets: Read complete after 0s [id=eu-west-1]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.ec2_backend[0] will be created
  + resource "aws_instance" "ec2_backend" {
      + ami                                  = "ami-0fe0b2cf0e1f25c8a"
      + arn                                  = (known after apply)    
      + associate_public_ip_address          = (known after apply)    
      + availability_zone                    = (known after apply)    
      + cpu_core_count                       = (known after apply)    
      + cpu_threads_per_core                 = (known after apply)    
      + disable_api_stop                     = (known after apply)    
      + disable_api_termination              = (known after apply)    
      + ebs_optimized                        = (known after apply)    
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "test-backend-key-pair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Backend Instance"
          + "Owner"       = "Lodis Artyom"
        }
      + tags_all                             = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Backend Instance"
          + "Owner"       = "Lodis Artyom"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.ec2_backend[1] will be created
  + resource "aws_instance" "ec2_backend" {
      + ami                                  = "ami-0fe0b2cf0e1f25c8a"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "test-backend-key-pair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Backend Instance"
          + "Owner"       = "Lodis Artyom"
        }
      + tags_all                             = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Backend Instance"
          + "Owner"       = "Lodis Artyom"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.ec2_frontend will be created
  + resource "aws_instance" "ec2_frontend" {
      + ami                                  = "ami-0fe0b2cf0e1f25c8a"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "test-frontend-key-pair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Frontend Instance"
          + "Owner"       = "Lodis Artyom"
        }
      + tags_all                             = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Frontend Instance"
          + "Owner"       = "Lodis Artyom"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_security_group.sg_backend will be created
  + resource "aws_security_group" "sg_backend" {
      + arn                    = (known after apply)
      + description            = "Allow inbound traffic to the Backend"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = "Ports from Backend"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = []
              + description      = "Ports from Backend"
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 8080
            },
        ]
      + name                   = "backend_sec_group"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Backend Security Group"
          + "Owner"       = "Lodis Artyom"
        }
      + tags_all               = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Backend Security Group"
          + "Owner"       = "Lodis Artyom"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.sg_frontend will be created
  + resource "aws_security_group" "sg_frontend" {
      + arn                    = (known after apply)
      + description            = "Allow inbound traffic to the Frontend"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Ports from Internet"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Ports from Internet"
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Ports from Internet"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "frontend_sec_group"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Frontend Security Group"
          + "Owner"       = "Lodis Artyom"
        }
      + tags_all               = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Frontend Security Group"
          + "Owner"       = "Lodis Artyom"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.subnet_backend will be created
  + resource "aws_subnet" "subnet_backend" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "172.31.65.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Backend Subnet"
          + "Owner"       = "Lodis Artyom"
        }
      + tags_all                                       = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Backend Subnet"
          + "Owner"       = "Lodis Artyom"
        }
      + vpc_id                                         = "vpc-00486a97605434fcc"
    }

  # aws_subnet.subnet_frontend will be created
  + resource "aws_subnet" "subnet_frontend" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "172.31.64.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Frontend Subnet"
          + "Owner"       = "Lodis Artyom"
        }
      + tags_all                                       = {
          + "Environment" = "Lesson_42"
          + "Name"        = "Frontend Subnet"
          + "Owner"       = "Lodis Artyom"
        }
      + vpc_id                                         = "vpc-00486a97605434fcc"
    }

Plan: 7 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + cidr_default_subnet_1        = "172.31.32.0/20"
  + cidr_default_subnet_2        = "172.31.0.0/20"
  + cidr_default_subnet_3        = "172.31.16.0/20"
  + latest_amazon_linux_ami_id   = "ami-0fe0b2cf0e1f25c8a"
  + latest_amazon_linux_ami_name = "amzn2-ami-kernel-5.10-hvm-2.0.20221210.1-x86_64-gp2"
  + vpc_cidr                     = "172.31.0.0/16"
  + vpc_id                       = "vpc-00486a97605434fcc"
  + vpc_subnets                  = [
      + "subnet-093b539ea9689e8c0",
      + "subnet-0affb800232bb18ca",
      + "subnet-0d1454afe4297ec32",
    ]

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_subnet.subnet_backend: Creating...
aws_subnet.subnet_frontend: Creating...
aws_security_group.sg_frontend: Creating...
aws_subnet.subnet_backend: Creation complete after 2s [id=subnet-0fad2ae26ffc488b9]
aws_security_group.sg_frontend: Creation complete after 5s [id=sg-0748cfd02a927ae51]
aws_security_group.sg_backend: Creating...
aws_security_group.sg_backend: Creation complete after 4s [id=sg-0f2c451a33b8da615]
aws_instance.ec2_backend[0]: Creating...
aws_instance.ec2_backend[1]: Creating...
aws_subnet.subnet_frontend: Still creating... [10s elapsed]
aws_subnet.subnet_frontend: Creation complete after 13s [id=subnet-0540c43c9732a7118]
aws_instance.ec2_frontend: Creating...
aws_instance.ec2_backend[1]: Still creating... [10s elapsed]
aws_instance.ec2_backend[0]: Still creating... [10s elapsed]
aws_instance.ec2_frontend: Still creating... [10s elapsed]
aws_instance.ec2_backend[1]: Still creating... [20s elapsed]
aws_instance.ec2_backend[0]: Still creating... [20s elapsed]
aws_instance.ec2_frontend: Still creating... [20s elapsed]
aws_instance.ec2_frontend: Creation complete after 24s [id=i-08b05467428170b65]
aws_instance.ec2_backend[0]: Still creating... [30s elapsed]
aws_instance.ec2_backend[1]: Still creating... [30s elapsed]
aws_instance.ec2_backend[0]: Creation complete after 33s [id=i-06633f8b371caba15]
aws_instance.ec2_backend[1]: Creation complete after 33s [id=i-074c1ab0f76c4062a]

Apply complete! Resources: 7 added, 0 changed, 0 destroyed.

Outputs:

cidr_default_subnet_1 = "172.31.32.0/20"
cidr_default_subnet_2 = "172.31.0.0/20"
cidr_default_subnet_3 = "172.31.16.0/20"
latest_amazon_linux_ami_id = "ami-0fe0b2cf0e1f25c8a"
latest_amazon_linux_ami_name = "amzn2-ami-kernel-5.10-hvm-2.0.20221210.1-x86_64-gp2"
vpc_cidr = "172.31.0.0/16"
vpc_id = "vpc-00486a97605434fcc"
vpc_subnets = tolist([
  "subnet-093b539ea9689e8c0",
  "subnet-0affb800232bb18ca",
  "subnet-0d1454afe4297ec32",
])
PS D:\first-TMS-repo\Terraform\HW_Lesson_42_Terr_3>